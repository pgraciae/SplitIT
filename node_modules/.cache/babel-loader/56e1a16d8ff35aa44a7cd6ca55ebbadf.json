{"ast":null,"code":"var _jsxFileName = \"/home/user/SplitIT/src/Components/Table.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n    overflowX: \"auto\"\n  },\n  table: {\n    minWidth: 650\n  },\n  selectTableCell: {\n    width: 60\n  },\n  tableCell: {\n    width: 130,\n    height: 40\n  },\n  input: {\n    width: 130,\n    height: 40\n  }\n}));\n\nconst createData = (quantity, productName, price) => ({\n  quantity,\n  productName,\n  price,\n  isEditMode: false\n}); // QUery a la base de dades quan es carregui la imatge , mentrestant es fa servir aixo \n\n\nconst rows = [createData(159, 'Frozen yoghurt', 6.0), createData(159, 'Ice cream sandwich', 237), createData(159, 'Eclair', 262), createData(159, 'Cupcake', 305), createData(159, 'Gingerbread', 356)];\n\nconst CustomTableCell = _ref => {\n  _s();\n\n  let {\n    row,\n    name,\n    onChange\n  } = _ref;\n  const classes = useStyles();\n  const {\n    isEditMode\n  } = row;\n  return /*#__PURE__*/_jsxDEV(TableCell, {\n    align: \"left\",\n    className: classes.tableCell,\n    children: isEditMode ? /*#__PURE__*/_jsxDEV(Input, {\n      value: row[name],\n      name: name,\n      onChange: e => onChange(e, row),\n      className: classes.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this) : row[name]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CustomTableCell, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomTableCell;\nexport default function BasicTable() {\n  _s2();\n\n  const [rows, setRows] = React.useState([createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0), createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3), createData(\"Eclair\", 262, 16.0, 24, 6.0)]);\n  const [previous, setPrevious] = React.useState({});\n  const classes = useStyles();\n  /*return (\n    <TableContainer component={Paper}>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Quantity </TableCell>\n            <TableCell align=\"right\">Product Name</TableCell>\n            <TableCell align=\"right\">Product Prize</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.productName}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n         \n              <TableCell align=\"right\">{row.quantity}</TableCell>\n              <TableCell align=\"right\">{row.productName}</TableCell>\n              <TableCell align=\"right\">{row.productPrice}</TableCell>\n              \n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );*/\n\n  /*#__PURE__*/\n  _jsxDEV(Paper, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"caption table\",\n      children: [/*#__PURE__*/_jsxDEV(\"caption\", {\n        children: \"A barbone structure table example with a caption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Dessert (100g serving)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Calories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Fat\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Carbs\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Protein\\xA0(g)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            className: classes.selectTableCell,\n            children: row.isEditMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"done\",\n                onClick: () => onToggleEditMode(row.id),\n                children: /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                \"aria-label\": \"revert\",\n                onClick: () => onRevert(row.id),\n                children: /*#__PURE__*/_jsxDEV(RevertIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 129,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"delete\",\n              onClick: () => onToggleEditMode(row.id),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"name\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"calories\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"fat\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"carbs\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CustomTableCell, {\n            row,\n            name: \"protein\",\n            onChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(BasicTable, \"5GSFS3H1mRV8J/VPwDEszDQ+JnU=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = BasicTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CustomTableCell\");\n$RefreshReg$(_c2, \"BasicTable\");","map":{"version":3,"sources":["/home/user/SplitIT/src/Components/Table.js"],"names":["Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","makeStyles","useStyles","theme","root","width","marginTop","spacing","overflowX","table","minWidth","selectTableCell","tableCell","height","input","createData","quantity","productName","price","isEditMode","rows","CustomTableCell","row","name","onChange","classes","e","BasicTable","setRows","React","useState","previous","setPrevious","map","onToggleEditMode","id","onRevert"],"mappings":"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","sourcesContent":["import Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      width: \"100%\",\n      marginTop: theme.spacing(3),\n      overflowX: \"auto\"\n    },\n    table: {\n      minWidth: 650\n    },\n    selectTableCell: {\n      width: 60\n    },\n    tableCell: {\n      width: 130,\n      height: 40\n    },\n    input: {\n      width: 130,\n      height: 40\n    }\n  }));\n\n  \n  const createData = (quantity, productName, price) => ({\n    quantity, productName, price, isEditMode: false\n  });\n  \n// QUery a la base de dades quan es carregui la imatge , mentrestant es fa servir aixo \nconst rows = [\n    createData( 159,'Frozen yoghurt', 6.0),\n    createData( 159,'Ice cream sandwich', 237),\n    createData( 159,'Eclair', 262),\n    createData( 159,'Cupcake', 305),\n    createData( 159, 'Gingerbread', 356)\n  ];\n\nconst CustomTableCell = ({ row, name, onChange }) => {\n    const classes = useStyles();\n    const { isEditMode } = row;\n    return (\n      <TableCell align=\"left\" className={classes.tableCell}>\n        {isEditMode ? (\n          <Input\n            value={row[name]}\n            name={name}\n            onChange={(e) => onChange(e, row)}\n            className={classes.input}\n          />\n        ) : (\n          row[name]\n        )}\n      </TableCell>\n    );\n  };\nexport default function BasicTable() {\n    const [rows, setRows] = React.useState([\n        createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\n        createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n        createData(\"Eclair\", 262, 16.0, 24, 6.0)\n      ]);\n      const [previous, setPrevious] = React.useState({});\n      const classes = useStyles();\n\n    /*return (\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Quantity </TableCell>\n              <TableCell align=\"right\">Product Name</TableCell>\n              <TableCell align=\"right\">Product Prize</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow\n                key={row.productName}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n           \n                <TableCell align=\"right\">{row.quantity}</TableCell>\n                <TableCell align=\"right\">{row.productName}</TableCell>\n                <TableCell align=\"right\">{row.productPrice}</TableCell>\n                \n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );*/\n    <Paper className={classes.root}>\n      <Table className={classes.table} aria-label=\"caption table\">\n        <caption>A barbone structure table example with a caption</caption>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\" />\n            <TableCell align=\"left\">Dessert (100g serving)</TableCell>\n            <TableCell align=\"left\">Calories</TableCell>\n            <TableCell align=\"left\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"left\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"left\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map(row => (\n            <TableRow key={row.id}>\n              <TableCell className={classes.selectTableCell}>\n                {row.isEditMode ? (\n                  <>\n                    <IconButton\n                      aria-label=\"done\"\n                      onClick={() => onToggleEditMode(row.id)}\n                    >\n                      <DoneIcon />\n                    </IconButton>\n                    <IconButton\n                      aria-label=\"revert\"\n                      onClick={() => onRevert(row.id)}\n                    >\n                      <RevertIcon />\n                    </IconButton>\n                  </>\n                ) : (\n                  <IconButton\n                    aria-label=\"delete\"\n                    onClick={() => onToggleEditMode(row.id)}\n                  >\n                    <EditIcon />\n                  </IconButton>\n                )}\n              </TableCell>\n              <CustomTableCell {...{ row, name: \"name\", onChange }} />\n              <CustomTableCell {...{ row, name: \"calories\", onChange }} />\n              <CustomTableCell {...{ row, name: \"fat\", onChange }} />\n              <CustomTableCell {...{ row, name: \"carbs\", onChange }} />\n              <CustomTableCell {...{ row, name: \"protein\", onChange }} />\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  }"]},"metadata":{},"sourceType":"module"}